"""
–ó–∞–¥–∞–Ω–∏–µ ‚Ññ6
üìå –î–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ –ø—Ä–æ—à–ª—É—é –∑–∞–¥–∞—á—É.
üìå –î–æ–±–∞–≤—å—Ç–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –ø–æ –ø–ª–æ—â–∞–¥–∏
üìå –î–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ —à–µ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
"""


class Rectangle:
    """–ö–ª–∞—Å—Å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫."""

    def __init__(self, side_a, side_b=0):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞—Ç—Ä–∏–±—É—Ç—ã side_a –∏ side_b."""
        self.side_a = side_a
        if side_b == 0:
            side_b = side_a
        self.side_b = side_b

    def get_perimeter(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–∏–º–µ—Ç—Ä –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞."""
        return 2 * (self.side_a + self.side_b)

    def get_area(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–ª–æ—â–∞–¥—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞."""
        return self.side_a * self.side_b

    def __add__(self, other):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å —Å—É–º–º–æ–π –ø–µ—Ä–∏–º–µ—Ç—Ä–æ–≤ –¥–≤—É—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤."""
        res = self.get_perimeter() + other.get_perimeter()
        return Rectangle(res)

    def __sub__(self, other):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å —Ä–∞–∑–Ω–æ—Å—Ç—å—é –ø–µ—Ä–∏–º–µ—Ç—Ä–æ–≤ –¥–≤—É—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤."""
        res = abs(self.get_perimeter() - other.get_perimeter())
        return Rectangle(res)

    def __eq__(self, other):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø–ª–æ—â–∞–¥–∏ –¥–≤—É—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ —Ä–∞–≤–Ω—ã, –∏–Ω–∞—á–µ False."""
        return self.get_area() == other.get_area()

    def __ne__(self, other):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø–ª–æ—â–∞–¥–∏ –¥–≤—É—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –Ω–µ —Ä–∞–≤–Ω—ã, –∏–Ω–∞—á–µ False."""
        return self.get_area() != other.get_area()

    def __gt__(self, other):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø–ª–æ—â–∞–¥—å –ø–µ—Ä–≤–æ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –±–æ–ª—å—à–µ –ø–ª–æ—â–∞–¥–∏ –≤—Ç–æ—Ä–æ–≥–æ, –∏–Ω–∞—á–µ False."""
        return self.get_area() > other.get_area()

    def __ge__(self, other):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø–ª–æ—â–∞–¥—å –ø–µ—Ä–≤–æ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ –ø–ª–æ—â–∞–¥–∏ –≤—Ç–æ—Ä–æ–≥–æ, –∏–Ω–∞—á–µ False."""
        return self.get_area() >= other.get_area()

    def __lt__(self, other):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø–ª–æ—â–∞–¥—å –ø–µ—Ä–≤–æ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –º–µ–Ω—å—à–µ –ø–ª–æ—â–∞–¥–∏ –≤—Ç–æ—Ä–æ–≥–æ, –∏–Ω–∞—á–µ False."""
        return self.get_area() < other.get_area()

    def __le__(self, other):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø–ª–æ—â–∞–¥—å –ø–µ—Ä–≤–æ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ –ø–ª–æ—â–∞–¥–∏ –≤—Ç–æ—Ä–æ–≥–æ, –∏–Ω–∞—á–µ False."""
        return self.get_area() <= other.get_area()

    def print_info(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–µ –Ω–∞ –ø–µ—á–∞—Ç—å."""
        print(f'–°—Ç–æ—Ä–æ–Ω–∞ a: {self.side_a}')
        print(f'–°—Ç–æ—Ä–æ–Ω–∞ b: {self.side_b}')
        print(f'–ü–µ—Ä–∏–º–µ—Ç—Ä: {self.get_perimeter()}')
        print(f'–ü–ª–æ—â–∞–¥—å: {self.get_area()}')


if __name__ == '__main__':
    rectangle1 = Rectangle(7.3)
    rectangle1.print_info()

    rectangle2 = Rectangle(5.6, 10.2)
    rectangle2.print_info()

    print(f'({rectangle1.get_area():.2f} == {rectangle2.get_area():.2f}):', rectangle1 == rectangle2)
    print(f'({rectangle1.get_area():.2f} != {rectangle2.get_area():.2f}):', rectangle1 != rectangle2)
    print(f'({rectangle1.get_area():.2f} > {rectangle2.get_area():.2f}):', rectangle1 > rectangle2)
    print(f'({rectangle1.get_area():.2f} <= {rectangle2.get_area():.2f}):', rectangle1 <= rectangle2)
    print(f'({rectangle1.get_area():.2f} < {rectangle2.get_area():.2f}):', rectangle1 < rectangle2)
    print(f'({rectangle1.get_area():.2f} >= {rectangle2.get_area():.2f}):', rectangle1 >= rectangle2)

#
# class Rectangle:
#
#     def __init__(self, side_a, side_b=0):
#         self.side_a = side_a
#         if side_b == 0:
#             side_b = side_a
#         self.side_b = side_b
#
#     def get_perimeter(self):
#         return 2 * (self.side_a + self.side_b)
#
#     def get_area(self):
#         return self.side_a * self.side_b
#
#     def __add__(self, other):
#         # (self.side_a + other.side_a, self.side_b + other.side_b)
#         res = self.get_perimeter() + other.get_perimeter()
#         return Rectangle(res)
#
#     def __sub__(self, other):
#         res = abs(self.get_perimeter() - other.get_perimeter())
#         return Rectangle(res)
#
#     def __eq__(self, other):  # —Ä–∞–≤–Ω–æ ==
#         return self.get_area() == other.get_area()
#
#     def __ne__(self, other):  # –Ω–µ—Ä–∞–≤–Ω–æ !=
#         return self.get_area() != other.get_area()
#
#     def __gt__(self, other):  # –±–æ–ª—å—à–µ >
#         return self.get_area() > other.get_area()
#
#     def __ge__(self, other):  # –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ >=
#         return self.get_area() >= other.get_area()
#
#     def __lt__(self, other):  # –º–µ—Ç–æ–¥ –º–µ–Ω—å—à–µ <
#         return self.get_area() < other.get_area()
#
#     def __le__(self, other):  # –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ <=
#         return self.get_area() <= other.get_area()
#
#
#
# rectangle1 = Rectangle(7.3)
# rectangle2 = Rectangle(5.6, 10.2)
#
# print(f'–ø–ª–æ—â–∞–¥—å 1 –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ = {rectangle1.get_area():.2f}')
# print(f'–ø–ª–æ—â–∞–¥—å 2 –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ = {rectangle2.get_area():.2f}')
# # print(rectangle1 == rectangle2)
# print(f'({rectangle1.get_area():.2f} = {rectangle2.get_area():.2f}):', rectangle1 == rectangle2)
# print(f'({rectangle1.get_area():.2f} != {rectangle2.get_area():.2f}):', rectangle1 != rectangle2)
# print(f'({rectangle1.get_area():.2f} > {rectangle2.get_area():.2f}):', rectangle1 > rectangle2)
# print(f'({rectangle1.get_area():.2f} <= {rectangle2.get_area():.2f}):', rectangle1 <= rectangle2)
# print(f'({rectangle1.get_area():.2f} < {rectangle2.get_area():.2f}):', rectangle1 < rectangle2)
# print(f'({rectangle1.get_area():.2f} >= {rectangle2.get_area():.2f}):', rectangle1 >= rectangle2)
